---
alwaysApply: true
---

# 핵심 개발 원칙

## 코드 품질 우선순위
- **1순위**: 기능 동작과 안정성
- **2순위**: 코드 가독성과 유지보수성  
- **3순위**: 성능 최적화
- **4순위**: 완벽한 UI/UX 매칭

## 아키텍처 분리 원칙
- **컨트롤러**: 요청 처리와 응답만 담당, 비즈니스 로직 금지
- **Form Request**: 유효성 검사와 권한 확인 담당
- **Service**: 비즈니스 로직 담당
- **Model**: 데이터베이스 관계와 쿼리 스코프만 담당

# 파일 분리 규칙

## CSS/JS 분리
- Blade 파일에 `<style>`, `<script>` 태그 직접 작성 금지
- CSS: `public/css/` 디렉토리에 저장
- JS: `public/js/` 디렉토리에 저장 (바닐라 JS 우선, Fetch API 사용)

## DatePicker
- 모든 datepicker 기능은 `public/js/common/datepicker.js` 활용
- 페이지별 초기화 코드 작성 금지

# 리팩토링 규칙

## 컨트롤러
- 복잡한 로직은 Service 클래스로 이동
- 유효성 검사는 Form Request 클래스 사용

## Service 클래스
- `app/Services/` 디렉토리에 저장
- 메서드명은 동사+명사 형태
- 단일 책임 원칙 준수

## Form Request
- `php artisan make:request`로 생성
- `rules()`, `messages()`, `withValidator()`, `authorize()` 메서드 활용

# CSS/UI 규칙

## 기존 CSS 우선 사용
- 새로운 CSS 임의 작성 금지
- `publishing/` 디렉토리 기존 CSS 참고
- 기존 CSS와 충돌 시 새로운 CSS 추가보다 기존 CSS 수정 우선
- CSS 클래스명과 구조 그대로 유지

## UI 컴포넌트
- 모달, 팝업 등은 기존 디자인 시스템 준수
- 기존 CSS 클래스명 변경 금지

# 데이터 관리 규칙

## 마이그레이션
- 테이블 생성 시 최종 스키마를 한 번에 정의
- 불필요한 중간 마이그레이션 파일 삭제하여 관리 복잡성 줄임

## 시더
- 하나의 테이블에는 하나의 시더만 생성
- 시더 파일명은 테이블명과 동일하게 작성

## 데이터 표시
- 값이 없을 때는 공백(`''`)으로 표시
- 가짜 데이터나 임시 텍스트 표시 금지